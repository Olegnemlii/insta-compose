services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: bitnami/kafka:latest
    ports:
      - "9092:9092"
    environment:
    - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
    - ALLOW_PLAINTEXT_LISTENER=yes
    - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093 # Добавляем CONTROLLER listener
    - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092 #,CONTROLLER://kafka:9093
    - KAFKA_CFG_PROCESS_ROLES=broker,controller
    - KAFKA_CFG_NODE_ID=1
    - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT # Указываем протокол безопасности для CONTROLLER
    - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093 # Настраиваем кворум для KRaft
    depends_on:
      - zookeeper

  auth-service:
    build:
      context: ./auth
      args:
        POSTGRES_USER: ${POSTGRES_USER}
        POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "50051:50051"
    environment:
      DATABASE_URL: "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable"
      PORT: 50051
      MAILOPOST_API_KEY: ${MAILOPOST_API_KEY}
      MAILOPOST_SENDER: ${MAILOPOST_SENDER}
      REDIS_ADDR: ${REDIS_ADDR}
      JWT_SECRET: ${JWT_SECRET}
      KAFKA_BROKER_ADDRESS: kafka:9092
      KAFKA_TOPIC: auth_topic  # Убедитесь, что имя топика соответствует тому, что вы создаете
      GOOSE_DRIVER: postgres
      GOOSE_DBSTRING: "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable"
    depends_on:
      - postgres
      - kafka # Добавляем зависимость от Kafka
    # extra_hosts:
    #   - "postgres:host-gateway"
    command: ["/app/auth"]

  email-service:
    build: ./email-service
    environment:
      KAFKA_BROKER_ADDRESS: kafka:9092
      KAFKA_TOPIC: email-notifications  # Убедитесь, что имя топика соответствует тому, что вы создаете
      MAILOPOST_API_KEY: ${MAILOPOST_API_KEY}
      MAILOPOST_SENDER: ${MAILOPOST_SENDER}
    depends_on:
      - kafka
    # extra_hosts:
    #   - "kafka:host-gateway" 

  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

volumes:
  postgres_data:
